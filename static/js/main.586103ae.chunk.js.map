{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","array","length","Array","from","map","v","k","x","addPreZero","num","state","year","M_month","month","day","week","hour","Minute","second","Zodiac","split","M_months","_this2","setInterval","time","Date","setState","getUTCFullYear","getUTCMonth","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","_this3","react_default","a","createElement","className","concat","index","key","style","transform","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.586103ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state=({\r\n      year:2019,\r\n      M_month:'Mar',\r\n      month:1,\r\n      day:1,\r\n      week:1,\r\n      hour:12,\r\n      Minute:1,\r\n      second:1,\r\n      Zodiac:'Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn, Aquarius, Pisces'.split(','),\r\n      M_months:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Spt\",\"Oct\",\"Nov\",\"Dec\"],\r\n    })\r\n  }\r\n\r\n componentWillMount(){\r\n   setInterval(()=>{\r\n     let time= new Date()\r\n     this.setState({\r\n      year:this.state.Zodiac[time.getUTCFullYear()%12],\r\n      M_month:this.state.M_months[time.getUTCMonth()],\r\n      month:time.getMonth()+1,\r\n      day:time.getDate(),\r\n      week:time.getDay(),\r\n      hour:time.getHours(),\r\n      Minute:time.getMinutes(),\r\n      second:time.getSeconds()\r\n     })\r\n   },1000)\r\n\r\n }\r\n  array = length => Array.from({length}).map((v, k) => k).map(x=>x+1);\r\n  addPreZero = num =>{\r\n    if(num>=10)return num\r\n    return '0'+num\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className='msg'>\r\n            <div  className='year'>\r\n            <span>\r\n            {this.state.year}</span> / Year\r\n            </div>\r\n          </div>\r\n          <div className='M_month'>\r\n          {`${this.state.M_month}`}\r\n          </div>\r\n          <div className='box'>\r\n\r\n           \r\n\r\n            {this.array(12).map((x,index)=>{\r\n              return (\r\n                <div key={index} className={`month item ${index===(this.state.month-1)?\"active\":\"\"}`} style={{transform: `rotate(${index*30-30*(this.state.month-1)}deg)`}}>\r\n                  {`${x} month`}\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            {this.array(30).map((x,index)=>{\r\n              return (\r\n                <div key={index} className={`day item ${index===(this.state.day-1)?\"active\":\"\"}`} style={{transform: `rotate(${index*12-12*(this.state.day-1)}deg)`}}>\r\n                  {`${x} day`}\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            {this.array(7).map((x,index)=>{\r\n              return (\r\n                <div key={index} \r\n                className={`week item ${index===(this.state.week-1)?\"active\":\"\"}`} \r\n                style={{transform: `rotate(${index*(360/21)-(360/21)*(this.state.week-1)}deg)`}}>\r\n                  {`week ${x}`}\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            {this.array(24).map((x,index)=>{\r\n              return (\r\n                <div key={index} \r\n                className={`hour item ${index===(this.state.hour-1)?\"active\":\"\"}`} \r\n                style={{transform: `rotate(${index*(360/24)-(360/24)*(this.state.hour-1)}deg)`}}>\r\n                  {`${x} hr`}\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            {this.array(60).map((x,index)=>{\r\n              return (\r\n                <div key={index} \r\n                className={`Minute item ${index===(this.state.Minute-1)?\"active\":\"\"}`} \r\n                style={{transform: `rotate(${index*(360/60)-(360/60)*(this.state.Minute-1)}deg)`}}>\r\n                  {`${x} min`}\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            {this.array(60).map((x,index)=>{\r\n              return (\r\n                <div key={index} \r\n                className={`second item ${index===(this.state.second-1)?\"active\":\"\"}`} \r\n                style={{transform: `rotate(${index*(360/60)-(360/60)*(this.state.second-1)}deg)`}}>\r\n                  {`${x} sec`}\r\n                </div>\r\n              )\r\n              \r\n            })}\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}